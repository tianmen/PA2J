/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list;
nonterminal Feature feature;
nonterminal Formals formal_list;
nonterminal Formal formal;
nonterminal Expressions expr_list;
nonterminal Expression expr;
nonterminal object object;
nonterminal string_const string;
nonterminal int_const int;

/* Precedence declarations go here. */

program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
	    {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;

feature_list
    ::= feature:f
        {: RESULT = (new Features(curr_lineno()).appendElement(f)); :}
    | feature_list:fl feature:f
        {: RESULT = fl.appendElement(f); :}
    |   {: RESULT = new Features(curr_lineno()); :}
    ;

feature
    ::= OBJECTID:o LPAREN formal_list:f RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI 
        {: RESULT = new method(curr_lineno(), o, f, t, e); :}
    | OBJECTID:o COLON TYPEID:t
        {: RESULT = new attr(curr_lineno(), o, t, new no_expr(curr_lineno())); // TODO maybe need initialize
        :}
    | OBJECTID:o COLON TYPEID:t DARROW expr:e
        {: RESULT = new attr(curr_lineno(), o, t, e); :}
    ;
    
formal_list
    ::= formal:f
        {: RESULT = new Formals(curr_lineno()).appendElement(f); :}
    | formal_list:fl formal:f
        {: RESULT = fl.appendElement(f); :}
    |   {: RESULT = new Formals(curr_lineno()); :}
    ;

formal
    ::= OBJECTID:o COLON TYPEID:t
        {: RESULT = new formalc(curr_lineno(), o, t); :}
    ;

expr_list
    ::= expr_list:el COMMA expr:e
        {: RESULT = el.appendElement(e); :}
    | expr:e {: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
    | {: RESULT = new Expressions(curr_lineno()); :}
    ;

expr
    ::= 
    OBJECTID:o LPAREN expr_list:el RPAREN
    {: 
        object self = new object(curr_lineno(), AbstractTable.idtable.addString("self"));
        self.set_type(AbstractTable.idtable.addString("SELF_TYPE"));
        RESULT = new dispatch(curr_lineno(), self, o, el); :}
    | expr:e DOT OBJECTID:o LPAREN expr_list:el RPAREN
    {: RESULT = new dispatch(curr_lineno(), e, o, el); :}
    | string:s {: RESULT = s; :}
    | int:i {: RESULT = i; :}
    | object:o {: RESULT = o; :}
    ;

object
    ::= OBJECTID:o
    {: RESULT = new object(curr_lineno(), o); :}
    ;

string
    ::= STR_CONST:s
    {: RESULT = new string_const(curr_lineno(), s); :}
    ;

int
    ::= INT_CONST:i
    {: RESULT = new int_const(curr_lineno(), i); :}
    ;
